import Router, { withRouter } from "next/router";

import { Fragment, useEffect, useState } from "react";
import {
  Disclosure,
  Menu,
  RadioGroup,
  Switch,
  Transition,
} from "@headlessui/react";
import {
  MagnifyingGlassIcon,
  QuestionMarkCircleIcon,
} from "@heroicons/react/20/solid";
import {
  Bars3Icon,
  BellIcon,
  CogIcon,
  CreditCardIcon,
  KeyIcon,
  SquaresPlusIcon,
  UserCircleIcon,
  XMarkIcon,
} from "@heroicons/react/24/outline";
import Link from "next/link";
import FooterComponent from "../widgets/footer";
import Image from "next/image";
import Head from "next/head";
import Cookies from "js-cookie";
import useCrypto from "../../services/cryptoJs";

const user = {
  name: "Lisa Marie",
  email: "lisamarie@example.com",
  imageUrl: "./assets/GREMA-LOGO2.jpg",
};

const userNavigation = [{ name: "Sign out", href: "#" }];
const subNavigation = [
  {
    name: "Profile",
    href: "/portal/profile",
    icon: UserCircleIcon,
    current: false,
  },
  { name: "Exams", href: "/portal/exams", icon: CogIcon, current: false },
  {
    name: "Class timetable",
    href: "/portal/time-tables/class",
    icon: BellIcon,
    current: false,
  },
  {
    name: "Exams timetable",
    href: "/portal/time-tables/exams",
    icon: KeyIcon,
    current: false,
  },
];

const crypto = new useCrypto();
function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

const MainLayout = ({ children }) => {
  const [student, setStudent] = useState({});

  const getStudent = () => {
    let stu = JSON.parse(crypto.decrypt(Cookies.get("USER")));
    // console.log(stu);
    if (stu?.data == null || stu?.data == "Session expired") {
      Router.push("/signin");
    }
    return setStudent(stu);
  };

  useEffect(() => {
    getStudent();
  }, []);

  return (
    <>
      <div className="h-full">
        <Head>
          <title>XamPortal</title>
          <meta name="description" content="Generated by create next app and phynocut solutions" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="./assets/logo.jpg"/>
        </Head>
        <Disclosure as="header" className="bg-white shadow">
          {({ open }) => (
            <>
              <div className="mx-auto max-w-7xl px-2 sm:px-4 lg:divide-y lg:divide-gray-200 lg:px-8">
                <div className="relative flex h-16 justify-between">
                  <div className="relative z-10 flex px-2 lg:px-0">
                    <div className="flex flex-shrink-0 items-center">
                      <Link href={"/"}>
                        <Image
                          className="block "
                          src="/assets/logo.jpg"
                          width={80}
                          height={80}
                          alt="xamPortal Schools"
                        />
                      </Link>
                    </div>
                  </div>
                  <div className="relative z-0 flex flex-1 items-center justify-center px-2 sm:absolute sm:inset-0">
                    <div className="w-full max-w-xs sr-only">
                      <label htmlFor="search" className="sr-only">
                        Search
                      </label>
                      <div className="relative">
                        <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                          <MagnifyingGlassIcon
                            className="h-5 w-5 flex-shrink-0 text-gray-400"
                            aria-hidden="true"
                          />
                        </div>
                        <input
                          name="search"
                          id="search"
                          className="block w-full rounded-md border border-gray-300 bg-white py-2 pl-10 pr-3 text-sm placeholder-gray-500 focus:border-gray-900 focus:text-gray-900 focus:placeholder-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-900 sm:text-sm"
                          placeholder="Search"
                          type="search"
                        />
                      </div>
                    </div>
                  </div>
                  <div className="relative z-10 flex items-center lg:hidden">
                    {/* Mobile menu button */}
                    <Disclosure.Button className="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-gray-900">
                      <span className="sr-only">Open menu</span>
                      {open ? (
                        <XMarkIcon
                          className="block h-6 w-6"
                          aria-hidden="true"
                        />
                      ) : (
                        <Bars3Icon
                          className="block h-6 w-6"
                          aria-hidden="true"
                        />
                      )}
                    </Disclosure.Button>
                  </div>
                  <div className="hidden lg:relative lg:z-10 lg:ml-4 lg:flex lg:items-center">
                    <button
                      type="button"
                      className="flex-shrink-0 rounded-full bg-white p-1 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-900 focus:ring-offset-2"
                    >
                      <span className="sr-only">View notifications</span>
                      <BellIcon className="h-6 w-6" aria-hidden="true" />
                    </button>

                    {/* Profile dropdown */}
                    <Menu as="div" className="relative ml-4 flex-shrink-0">
                      <div>
                        <Menu.Button className="flex rounded-full bg-white focus:outline-none focus:ring-2 focus:ring-gray-900 focus:ring-offset-2">
                          <span className="sr-only">Open user menu</span>
                          {/* <img className="h-8 w-8 rounded-full" src={user.imageUrl} alt="user" /> */}
                          <p className="p-2 rounded-full text-sm text-white bg-gray-500">
                            {student?.username?.split(" ")[0]?.toString()[0]}-
                            {student?.username?.split(" ")[1]?.toString()[0]}
                          </p>
                        </Menu.Button>
                      </div>
                      <Transition
                        as={Fragment}
                        enter="transition ease-out duration-100"
                        enterFrom="transform opacity-0 scale-95"
                        enterTo="transform opacity-100 scale-100"
                        leave="transition ease-in duration-75"
                        leaveFrom="transform opacity-100 scale-100"
                        leaveTo="transform opacity-0 scale-95"
                      >
                        <Menu.Items className="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                          {userNavigation.map((item) => (
                            <Menu.Item key={item.name}>
                              {({ active }) => (
                                <a
                                  href={item.href}
                                  className={classNames(
                                    active ? "bg-gray-100" : "",
                                    "block py-2 px-4 text-sm text-gray-700"
                                  )}
                                >
                                  {item.name}
                                </a>
                              )}
                            </Menu.Item>
                          ))}
                        </Menu.Items>
                      </Transition>
                    </Menu>
                  </div>
                </div>
                <nav
                  className="hidden lg:flex lg:space-x-8 lg:py-2 sr-only"
                  aria-label="Global"
                >
                  {/* {navigation.map((item) => ( */}
                  <a
                    // key={item.name}
                    href={"/"}
                    className="inline-flex items-center rounded-md py-2 px-3 text-sm font-medium text-gray-900 hover:bg-gray-50 hover:text-gray-900"
                  >
                    {student?.username}
                  </a>
                </nav>
              </div>

              <Disclosure.Panel
                as="nav"
                className="lg:hidden"
                aria-label="Global"
              >
                <div className="space-y-1 px-2 pt-2 pb-3">
                  {/* {navigation.map((item) => ( */}
                  <Disclosure.Button
                    // key={item.name}
                    as="a"
                    href={"/"}
                    className="block rounded-md py-2 px-3 text-base font-medium text-gray-900 hover:bg-gray-50 hover:text-gray-900"
                  >
                    {student?.username}
                  </Disclosure.Button>
                </div>
                <div className="border-t border-gray-200 pt-4 pb-3">
                  <div className="flex items-center px-4">
                    <div className="flex-shrink-0">
                      <img
                        className="h-10 w-10 rounded-full"
                        src={user?.imageUrl}
                        alt=""
                      />
                    </div>
                    <div className="ml-3">
                      <div className="text-base font-medium text-gray-800">
                        {user.name}
                      </div>
                      <div className="text-sm font-medium text-gray-500">
                        {user?.email}
                      </div>
                    </div>
                    <button
                      type="button"
                      className="ml-auto flex-shrink-0 rounded-full bg-white p-1 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-900 focus:ring-offset-2"
                    >
                      <span className="sr-only">View notifications</span>
                      <BellIcon className="h-6 w-6" aria-hidden="true" />
                    </button>
                  </div>
                  <div className="mt-3 space-y-1 px-2">
                    {userNavigation.map((item) => (
                      <Disclosure.Button
                        key={item.name}
                        as="a"
                        href={item.href}
                        className="block rounded-md py-2 px-3 text-base font-medium text-gray-500 hover:bg-gray-50 hover:text-gray-900"
                      >
                        {item.name}
                      </Disclosure.Button>
                    ))}
                  </div>
                </div>
              </Disclosure.Panel>
            </>
          )}
        </Disclosure>

        <main className="mx-auto max-w-7xl pb-10 lg:py-4 lg:px-8">
          <div className="lg:grid lg:grid-cols-12 lg:gap-x-5">
            <aside className="py-6 px-2 sm:px-6 lg:col-span-2 lg:py-0 lg:px-0">
              <nav className="space-y-1">
                {subNavigation.map((item) => (
                  <Link
                    key={item.name}
                    href={item.href}
                    className={classNames(
                      item.current
                        ? "bg-gray-50 text-orange-600 hover:bg-white"
                        : "text-gray-900 hover:text-gray-900 hover:bg-gray-50",
                      "group rounded-md px-3 py-2 flex items-center text-sm font-medium"
                    )}
                    aria-current={item.current ? "page" : undefined}
                  >
                    <item.icon
                      className={classNames(
                        item.current
                          ? "text-orange-500"
                          : "text-gray-400 group-hover:text-gray-500",
                        "flex-shrink-0 -ml-1 mr-3 h-6 w-6"
                      )}
                      aria-hidden="true"
                    />
                    <span className="truncate">{item.name}</span>
                  </Link>
                ))}
              </nav>
            </aside>

            {/* Payment details */}
            <div className="space-y-6 sm:px-2 lg:col-span-9 lg:px-0">
              {children}
            </div>
          </div>
        </main>
      </div>
    </>
  );
};

const StudentLayout = withRouter(MainLayout);

export default StudentLayout;
